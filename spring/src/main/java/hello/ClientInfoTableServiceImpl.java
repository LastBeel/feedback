package hello;

//https://medium.com/@gustavo.ponce.ch/spring-boot-spring-mvc-spring-security-mysql-a5d8545d837d

import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Controller;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

//@Controller    // This means that this class is a Controller
@RequestMapping(path = "/test") // This means URL's start with /test (after Application path)
@Service("ClientInfoTableService")
public class ClientInfoTableServiceImpl implements ClientInfoTableService {
    // Autowired means to get the bean called somethingRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    private ClientInfoTableRepository clientInfoTableRepository;
    @Autowired
    private FeedbackTableRepository feedbackTableRepository;
    @Autowired
    private BCryptPasswordEncoder bCryptPasswordEncoder;

    @Override
    public ClientInfoTable findClientByUsername(String username) {
        return clientInfoTableRepository.findByUsername(username);
    }

    @Override
    public void saveClient(ClientInfoTable c) {
        c.setPassword(bCryptPasswordEncoder.encode(c.getPassword()));
        // c.setActive(1); //TODO: is active necessary?
        if (c.getId() % 2 == 0) {
            c.setIsAdmin(true);
        }
        clientInfoTableRepository.save(c);
    }


    // Map ONLY GET Requests
    @GetMapping(path = "/addClient")
    // @ResponseBody means the returned String is the response, not a view name
    public @ResponseBody
    // @RequestParam means it is a parameter from the GET or POST request

    String addNewClient(@RequestParam String username
            , @RequestParam String password) {
        ClientInfoTable c = new ClientInfoTable();
        c.setUsername(username);
        c.setPassword(password);
        clientInfoTableRepository.save(c);
        return "Saved";
    }


    @GetMapping(path = "/addFeedback")
    public @ResponseBody
    String addNewFeedback(@RequestParam int rating,
                          @RequestParam String comment) {
        FeedbackTable n = new FeedbackTable();
        n.setRating(rating);
        n.setComment(comment);
        //java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());        n.setFeedbackDate(date);
        //Date date = new Date();
        //TODO: current date
        feedbackTableRepository.save(n);
        return "Saved";
    }

    @GetMapping(path = "/getAllClients")
    public @ResponseBody
    Iterable<ClientInfoTable> getAllClients() {
        // This returns a JSON or XML with the users
        return clientInfoTableRepository.findAll();
    }

    @GetMapping(path = "/getAllFeedback")
    public @ResponseBody
    Iterable<FeedbackTable> getAllFeedback() {
        return feedbackTableRepository.findAll();
    }


}